version: '3.9'
services:
  nestjs:
    container_name: nestjs
    image: ${REGISTRY}/nest-js:${IMAGE_TAG}
    restart: always
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.nest-js.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.nest-js.middlewares=secure-headers
      - traefik.http.routers.nest-js.entryPoints=https
      - traefik.http.routers.nest-js.tls=true
      - traefik.http.routers.nest-js.tls.certResolver=letsEncrypt
    environment:
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_SYNCHRONIZE: ${DB_SYNCHRONIZE}

  postgres:
    image: postgres:latest
    container_name: postgres
    networks:
      - default
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

networks:
  traefik-public:
    external: true
